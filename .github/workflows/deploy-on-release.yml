name: Deploy on Pre-Release

on:
  release:
    types: [prereleased, released]

permissions:
  contents: write

jobs:
  deploy:
    runs-on: ubuntu-latest
    # Expose JAR paths to subsequent jobs
    outputs:
      jars: ${{ steps.collect_jars.outputs.jars }}

    env:
      MVN_CENTRAL_USR: ${{ secrets.MVN_CENTRAL_USR }}
      MVN_CENTRAL_PWD: ${{ secrets.MVN_CENTRAL_PWD }}

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Java 21
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 21

      - name: Get current version from POM
        id: get_version
        run: |
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Adjust version for pre-release or release
        run: |
          CURRENT_VERSION="${{ steps.get_version.outputs.version }}"
          if [ "${{ github.event.release.prerelease }}" = "true" ]; then
            # For a pre-release, ensure version has "-SNAPSHOT"
            if [[ "$CURRENT_VERSION" != *-SNAPSHOT ]]; then
              mvn versions:set -DnewVersion="${CURRENT_VERSION}-SNAPSHOT"
            fi
          else
            # For a release, remove "-SNAPSHOT" if present
            CLEAN_VERSION="${CURRENT_VERSION/-SNAPSHOT/}"
            mvn versions:set -DnewVersion="$CLEAN_VERSION"
          fi

      - name: Import GPG private key
        run: |
          echo "$GPG_PRIVATE_KEY" > private.key
          gpg --batch --import private.key
          rm private.key
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}

      - name: Set GPG trust level
        run: |
          KEY_ID=$(gpg --list-keys --with-colons | grep pub | cut -d ':' -f 5 | head -1)
          echo -e "trust\n5\ny\nquit" | gpg --command-fd 0 --batch --edit-key "$KEY_ID"

      - name: Build and Deploy with Maven
        run: mvn -s ./settings.xml deploy

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: built-jars
          path: target/*.jar

  upload-release-assets:
    needs: deploy
    runs-on: ubuntu-latest

    strategy:
      matrix:
        jar: ${{ fromJSON(needs.deploy.outputs.jars) }}

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Download the artifact
        uses: actions/download-artifact@v3
        with:
          name: built-jars

      - name: Upload JAR to GitHub Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ${{ matrix.jar }}      # from the matrix entry
          asset_name: ${{ matrix.jar }}      # or strip off 'target/' if desired
          asset_content_type: application/octet-stream